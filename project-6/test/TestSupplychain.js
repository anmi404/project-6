// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "Happy Bees"
    const originFarmInformation = "Belo Horizonte Area"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best stingless honey bees in the universe"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0 //Created
    const MarketPlaceID = accounts[1]
    const CourierID = accounts[1]
    const consumerID = accounts[1]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
   // (0) 0x09ca62860d3a215e8999d9ed76306899ec0d42f5 (~100 ETH)
   // (1) 0x9c5073e861405c8f2c3afc9932bc026310012f41 (~100 ETH)
   // (2) 0x63a59dd1594f866ea763aff8ddc3101955a0df66 (~100 ETH)
   // (3) 0x28d1515a897bdc5212b79cd614c805740d02acf5 (~100 ETH)
   // (4) 0x9f7a40bfacab7665f1f7802955747ba86a6eb8fb (~100 ETH)
   // (5) 0x0c08a91bcd655598a6dde428acdf40115da14666 (~100 ETH)
   // (6) 0x661b03327b7d27d535f82283fd07d083bf8fb9ff (~100 ETH)
   // (7) 0x5fbe05ca0768533aa4e377ff8a242a5c2f18b20a (~100 ETH)
   // (8) 0x5ac7c639f193dca7ee35d959de924ca63eb3462b (~100 ETH)
   // (9) 0x1403a107a01f5dc11c29d1c57896b036528b84df (~100 ETH)

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Beekeeper: accounts[1] ", accounts[1])
    console.log("MarketPlace: accounts[2] ", accounts[1])
    console.log("Courier: accounts[3] ", accounts[1])
    console.log("Consumer: accounts[4] ", accounts[1])

    // 1st Test
    it("Testing smart contract function createItem() that allows a beekeeper to create a hive", async() => {
        const supplyChain = await SupplyChain.deployed()
        supplyChain.addBeekeeper(originFarmerID, {from: originFarmerID})
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Created()
        var event = supplyChain.Created()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Created by calling function createItem()
        await supplyChain.createItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function 'HiveReady' that allows a beekeeper to mark an item 'Ready'", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false  
        
        // Watch the emitted event Ready()
        var event = supplyChain.Ready()
        await event.watch((err, res) => {
            eventEmitted = true
        })
    
        // Mark an item as Ready by calling function HiveReady()
        await supplyChain.HiveReady(upc, {from: originFarmerID})    

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')            
    })    

    // 3rd Test
    it("Testing smart contract function 'advertiseItem' that allows the beekeeper to mark an item 'Advertised'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false          
        
        // Watch the emitted event Advertised()
        var event = supplyChain.Advertised()
        await event.watch((err, res) => {
            eventEmitted = true
        })       

        // Mark an item as Packed by calling function packItem()
        await supplyChain.advertiseItem(upc, MarketPlaceID, {from: originFarmerID})           

    //    supplyChain.addMarketPlace(MarketPlaceID, {from: MarketPlaceID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], MarketPlaceID, 'Error: Invalid item MarketPlaceID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')            
    })    

    // 4th Test
    it("Testing smart contract function 'sellItem' that allows a MarketPlace to mark an item 'ForSale'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                 
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        }) 

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: MarketPlaceID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)          

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], MarketPlaceID, 'Error: Invalid item MarketPlaceID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                     
    })    

    // 5th Test
    it("Testing smart contract function 'buyItem' that allows the Seller to mark an item 'Sold'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                 
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })    

    //    supplyChain.addConsumer(consumerID, {from: consumerID})

        
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: consumerID, value: web3.toWei(1, "ether")})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)         

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                   
    })    

// 6th Test
    it("Testing smart contract function function 'packItem' that allows a farmer to mark an item 'Packed'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                 
        
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })         

     //   supplyChain.addCourier( CourierID, {from: CourierID})

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, CourierID, {from: originFarmerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)         

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                   
    })    


    // 7th Test
    it("Testing smart contract function 'shipItem' that allows the courier to mark an item 'Shipped'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                 
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })        

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, {from: CourierID})   

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)          

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], CourierID, 'Error: Invalid item CourierID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                         
    })    

    // 8th Test
    it("Testing smart contract function 'receiveItem' that allows the consumer to mark an item 'Received'", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false                 
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })       

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: consumerID})       

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)         

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')                        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)   
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Invalid item originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Invalid item originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Invalid item originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Invalid item originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)           

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Missing or Invalid State')
        assert.equal(resultBufferTwo[6], MarketPlaceID, 'Error: Invalid item MarketPlaceID')
        assert.equal(resultBufferTwo[7], CourierID, 'Error: Invalid item CourierID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
    })

});

