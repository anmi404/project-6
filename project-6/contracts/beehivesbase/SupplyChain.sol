pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
import "../beehivesaccesscontrol/ConsumerRole.sol";
import "../beehivesaccesscontrol/MarketPlaceRole.sol";
import "../beehivesaccesscontrol/BeekeeperRole.sol";
import "../beehivesaccesscontrol/CourierRole.sol";
import "../beehivescore/Ownable.sol";


// Define a contract 'Supplychain'
contract SupplyChain is ConsumerRole, MarketPlaceRole, BeekeeperRole, CourierRole, Ownable {

  // Define 'owner'
  //address SupplyChainOwner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  // A SKU (or Stock Keeping Unit) is a separate code for the purposes of tracking 
  // inventory at a manufacturer — a single product may have different SKUs if it’s sold by different retailers.
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Created,  // 0
    Ready,  // 1
    Advertised,     // 2
    ForSale,    // 3
    Sold,       // 4
    Packed,   // 5    
    Shipped,    // 6
    Received   // 7
    }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Beekeeper, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through stages
    address originFarmerID; // Metamask-Ethereum address of the Beekeeper
    string  originFarmName; // Beekeeper Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address MarketPlaceID;  // Metamask-Ethereum address of the MarketPlace
    address CourierID; // Metamask-Ethereum address of the Courier
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Created(uint upc);
  event Ready(uint upc);
  event Advertised(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Packed(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);

  // Define a modifer that checks to see if msg.sender == SupplyChainOwner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner());
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Created
  modifier created(uint _upc) {
    require(items[_upc].itemState == State.Created);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Ready
  modifier ready(uint _upc) {
    require(items[_upc].itemState == State.Ready);
    _;
  }
  
    // Define a modifier that checks if an item.state of a upc is Advertised
  modifier advertised(uint _upc) {
    require(items[_upc].itemState == State.Advertised);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
    // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  //to call parent constructor!!
  constructor() public payable Ownable() {
    //SupplyChainOwner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (isOwner()) {
      selfdestruct(owner());
    }
  }

  // Define a function 'createItem' that allows a farmer to mark an item 'Created'
  function createItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) public 
  {
    // Add the new item as part of Created
    items[_upc].itemState = defaultState;
    items[_upc].sku = sku;
    items[_upc].upc = _upc;
    items[_upc].ownerID = owner();
    items[_upc].originFarmerID = _originFarmerID;
    items[_upc].originFarmName = _originFarmName;
    items[_upc].originFarmInformation = _originFarmInformation;
    items[_upc].originFarmLatitude = _originFarmLatitude;
    items[_upc].originFarmLongitude = _originFarmLongitude;
    items[_upc].productNotes = _productNotes;
    items[_upc].MarketPlaceID = address(0);
    items[_upc].CourierID = address(0);
    items[_upc].consumerID = address(0);
    items[_upc].productID = sku; // Product ID potentially a combination of upc + sku

    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Created(_upc);
  }

  // Define a function 'HiveReady' that allows a beekeeper to mark an item 'Ready'
  function HiveReady(uint _upc) public created(_upc) verifyCaller(items[_upc].ownerID) onlyBeekeeper()
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Ready;

    // Emit the appropriate event
    emit Ready(_upc);
  }

  // Define a function 'advertiseItem' that allows the beekeeper to mark an item 'Advertised'
  // Call modifier to check if upc has passed previous supply chain stage
  function advertiseItem(uint _upc, address _MarketPlaceID) public ready(_upc) verifyCaller(items[_upc].ownerID) onlyBeekeeper()
    // Access Control List enforced by calling Smart Contract / DApp ??
    {
    // Update the appropriate fields: itemState
     items[_upc].MarketPlaceID = _MarketPlaceID;  // Metamask-Ethereum address of the MarketPlace
     items[_upc].itemState = State.Advertised;
     MarketPlaceRole.addMarketPlace(_MarketPlaceID);


    // Emit the appropriate event
    emit Advertised(_upc);
  }

  // Define a function 'sellItem' that allows a MarketPlace to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public advertised(_upc) verifyCaller(items[_upc].MarketPlaceID) //onlyMarketPlace()
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function.
  {
    // Update the appropriate fields
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the Seller to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable forSale(_upc) checkValue(_upc) paidEnough(items[_upc].productPrice) 
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifer to check if buyer has paid enough
    // Call modifer to send any excess ether back to buyer
    {
    // Update the appropriate fields - ownerID, distributorID, itemState
    uint256 _price = items[_upc].productPrice;
    address _consumerID = msg.sender; // Metamask-Ethereum address of the Consumer

    // Transfer money to farmer
    items[_upc].ownerID.transfer(_price);
    items[_upc].ownerID = _consumerID;
    items[_upc].consumerID = _consumerID;
    items[_upc].itemState = State.Sold;
    ConsumerRole.addConsumer(_consumerID);

    // emit the appropriate event
    emit Sold(_upc);
  }

 // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc, address _CourierID) public sold(_upc) verifyCaller(items[_upc].originFarmerID) onlyBeekeeper()
  // Call modifier to check if upc has passed previous supply chain stage
  // Call modifier to verify caller of this function
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    items[_upc].CourierID = _CourierID;
    CourierRole.addCourier( _CourierID);

    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'shipItem' that allows the courier to mark an item 'Shipped'
  // Use the above modifers to check if the item is packed
  function shipItem(uint _upc) public packed(_upc) verifyCaller(items[_upc].CourierID) onlyCourier()
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;

   
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the consumer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public shipped(_upc) verifyCaller(items[_upc].consumerID) onlyConsumer()
    // Call modifier to check if upc has passed previous supply chain stage
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields: itemState
    items[_upc].itemState = State.Received;

    // Emit the appropriate event
    emit Received(_upc);    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;

  return 
  (
    itemSKU,
    itemUPC,
    ownerID,
    originFarmerID,
    originFarmName,
    originFarmInformation,
    originFarmLatitude,
    originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address MarketPlaceID,
  address CourierID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  consumerID = items[_upc].consumerID; 
  CourierID = items[_upc].CourierID;
  MarketPlaceID = items[_upc].MarketPlaceID;
  itemState = uint(items[_upc].itemState);
  return 
  (
    itemSKU,
    items[_upc].upc,
    items[_upc].productID,
    items[_upc].productNotes,
    items[_upc].productPrice, 
    itemState,
    MarketPlaceID,  
    CourierID,
    consumerID
  );
  }
}
